


m = 10000;
tmax = 100;
t = linspace(0,tmax,m);

alpha = 1;
beta = 5;
gamma = 8;% d = 0.1 not in chaotic regime, d = bif variable
delta = .02;
omega = 1.4; 

% a2. = a1;
u = @(t) gamma*cos(omega*t);
f = @(t,a) [a(2); -(alpha*a(1) + beta*a(1)^3 + delta*a(2)) + u(t)];

[t,X] = ode45(f, t, [1 0]);


figure()
clf
plot(X(:,1), X(:,2));

% compute derivatives of the state X for all t in the sample
for i = 1:m
  dXdt(i,:) = f(t(i), X(i,:));
end

% add noise to the derivative data
eta = 0.5;      % noise magnitude
dXdt = dXdt + eta * randn(size(dXdt));




%% SINDy Algorithm:

% library of nonlinear functions including control
lib = @(t,a) [1; a(1); a(2); a(1)^2; a(2)^2; a(1)*a(2); ...
        a(1)^3; a(2)^3; a(1)^2*a(2); a(2)^2*a(1); ...
        sin(a(1)); cos(a(1)); sin(a(2)); cos(a(2));]';

% input data into library
for i = 1:m-1
  Theta(i,:) = lib(i,X(i,:));
end

Xi = SINDy(Theta, X(2:m,:));

% now have solution Xi that describes which nonlinear terms are active in
% the dynamics of the input system


%% Recover data with Xi 

Y = @(i,a) Xi' * lib(i,a)';

Xs(1,:) = Y(1,[.9,.01]);
for i = 1:m-1
    Xs(i+1,:) = Y(i,Xs(i,:));
end

figure()
clf
scatter(Xs(:,1), Xs(:,2),2);

Error = SimulationError(X(:,2), Xs(:,2));


